stages:
    - build
    - test
    - docs
    - tag
    - deploy

build:
  when: manual
  image: docker:latest
  stage: build
  only:
    - master
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"

test:
  when: manual
  image: centos:centos8
  stage: test
  variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  cache:
    paths:
      - .cache/pip
      - env/
  before_script:
    - dnf -y install dnf-plugins-core
    - dnf config-manager --set-enabled PowerTools
    - dnf -y install epel-release
    - dnf -y install
        bsdtar
        geolite2-country
        libcurl-devel
        libgcab1
        GeoIP-devel
        cairo-gobject-devel
        gobject-introspection-devel
        gnutls-utils
        gcc
        python3-devel
        python3-pip
        python3-virtualenv
        python3-psutil
        redis
        words
    - virtualenv env
    - source env/bin/activate
    - pip install pip -U
    - pip install -r requirements.txt --use-feature=2020-resolver
    - pip install mypy
    # required for tests
    - redis-server &
  script:
    #- source env/bin/activate
    - pytest --cov=lvfs --cov=plugins --cov=pkgversion --cov=infparser --cov=cabarchive --cov-fail-under=60
    - env/bin/python ./pylint_test.py

docs:
  when: manual
  image: alpine:latest
  stage: docs
  variables:
    TOKEN: "$RTD_TOKEN"
  script:
    - apk --no-cache add curl
    - ash build-docs.sh
  only:
    - master

tag for release:
  image: docker:latest
  services:
    - docker:dind
  stage: tag
  when: manual
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - echo "$CI_REGISTRY_IMAGE"
    - docker pull "$CI_REGISTRY_IMAGE":"$CI_COMMIT_SHORT_SHA"
    - docker tag fwupd/lvfs-website:"$CI_COMMIT_SHORT_SHA" fwupd/lvfs-website:latest
    - docker push fwupd/lvfs-website:latest
    
deploy web:
  stage: deploy
  when: manual
  image: python:latest
  script:
    - pip install awscli
    - aws ecs update-service --cluster "$FARGATE_PROD_CLUSTER" --service "$FARGATE_PROD_WEB_SERVICE" --force-new-deployment --region us-west-2
  only:
    - master

deploy metadata:
  stage: deploy
  when: manual
  image: python:latest
  script:
    - pip install awscli
    - aws ecs update-service --cluster "$FARGATE_PROD_CLUSTER" --service "$FARGATE_PROD_METADATA_SERVICE" --force-new-deployment --region us-west-2
  only:
    - master

deploy yara:
  stage: deploy
  when: manual
  image: python:latest
  script:
    - pip install awscli
    - aws ecs update-service --cluster "$FARGATE_PROD_CLUSTER" --service "$FARGATE_PROD_YARA_SERVICE" --force-new-deployment --region us-west-2
  only:
    - master

deploy beat:
  stage: deploy
  when: manual
  image: python:latest
  script:
    - pip install awscli
    - aws ecs update-service --cluster "$FARGATE_PROD_CLUSTER" --service "$FARGATE_PROD_BEAT_SERVICE" --force-new-deployment --region us-west-2
  only:
    - master
